:host {
	--tw-prose-headings:  rgb( 17, 24, 39);
	--tw-prose-quotes:    rgb( 17, 24, 39);
	--tw-prose-code:      rgb( 17, 24, 39);
	--tw-prose-links:     rgb( 17, 24, 39);
	--tw-prose-bold:      rgb( 17, 24, 39);
	--tw-prose-pre-bg:    rgb( 31, 41, 55);
	--tw-prose-body:      rgb( 55, 65, 81);
	--tw-prose-lead:      rgb( 75, 85, 99);
	--tw-prose-counters:  rgb(107,114,128);
	--tw-prose-captions:  rgb(107,114,128);
	--tw-prose-bullets:   rgb(209,213,219);
	--tw-prose-th-borders:rgb(209,213,219);
	--tw-prose-hr:        rgb(229,231,235);
--tw-prose-quote-borders:rgb(229,231,235);
	--tw-prose-pre-code:  rgb(229,231,235);
	--tw-prose-td-borders:rgb(229,231,235);
	
	--color-cherry:    rgb(131, 37, 79);
	--color-cherry300: rgb(211,116,155);
	--color-notBlack:  rgb( 25, 25, 25);
	--color-notGray500:rgb(130,127,124);
	--color-notGray200:rgb(222,217,211);
	--color-notWhite:  rgb(255,249,242);
	--color-blue600:   rgb( 37, 99,235);
	--color-white:     rgb(255,255,255);
	
	--color-foreground: var(--color-cherry);
	
	--emote-size: 1em;
	
	--media-margin: 2em;
}
/* rgb(37,99,23) #ebad25*/

/* defaults for elements, set by cohost */
/* 🟥 */
* /*, ::before, ::after */ /* i removed these before/after selectors since they don't seem to be necessary.*/ {
	box-sizing: border-box;
	/* default is: medium none currentColor; */
	/*border: 0 solid currentColor;*/
	border: 0px solid var(--color-notGray200); /* NEW */
}

hr {
	height: 0;
	color: inherit;
	border-top-width: 1px;
}
abbr[title] {
	-webkit-text-decoration: underline dotted;
	text-decoration: underline dotted;
}
h5, h6 {
	font-size: inherit;
	font-weight: inherit;
}
a {
	color: inherit;
	text-decoration: inherit;
}
b, strong {
	font-weight: bolder;
}
code, kbd, samp, pre {
	/*font-family: ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,liberation mono,courier new,monospace;*/
	/* altered because the default sucks */
	font-family: Cascadia Code, Fira Code, SFMono-Regular, Menlo, Monaco, Consolas, liberation mono, courier new, monospace;
	font-size: 1em;
}
small {
	font-size: 80%
}
sub, sup {
	font-size: 75%;
	line-height: 0;
	position: relative;
	vertical-align: baseline;
}
sub {
	bottom: -0.25em;
}
sup {
	top: -0.5em;
}
table {
	text-indent: 0;
	border-color: inherit;
	border-collapse: collapse;
}

img, svg, video, canvas, audio, iframe, embed, object {
	display: block;
	vertical-align: middle;
}
img, video {
	max-width: 100%;
	height: auto;
}
button, input, optgroup, select, textarea {
	font-family: inherit;
	font-size: 100%;
	line-height: inherit;
	color: inherit;
	margin: 0;
	padding: 0;
}
/* <input> gets converted to <input type=checkbox disabled> */
[type=checkbox] {
	appearance: none;
	padding: 0;
	display: inline-block;
	vertical-align: middle;
	background-origin: border-box;
	-webkit-user-select: none; user-select: none;
	flex-shrink: 0;
	height: 1rem;
	width: 1rem;
	border-color: var(--color-notGray500);
	border-width: 1px;
	border-radius: 0;
	background-color: var(--color-notWhite);
	color: var(--color-foreground);
}
[type=checkbox]:checked, [type=checkbox]:indeterminate {
	border-color: transparent;
	background-color: currentColor;
	background-size: 100% 100%;
	background-position: center;
	background-repeat: no-repeat;
}
[type=checkbox]:checked {
	background-image: url('data:image/svg+xml,<svg viewBox="0 0,16 16" xmlns="http://www.w3.org/2000/svg"><path stroke="white" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" d="m 4.5 8.5, 2 2, 5 -5"/></svg>');
}
[type=checkbox]:indeterminate { /* gender */
	background-image: url("data:image/svg+xml,<svg viewBox='0 0,16 16' xmlns='http://www.w3.org/2000/svg'><path stroke='white' fill='none' stroke-linecap='round' stroke-width='2' d='M 4 8 h 8'/></svg>");
}
input[type=checkbox]:disabled {
	cursor: not-allowed;
	color: var(--color-cherry300);
}

*:focus {
	outline-style: solid;
	outline-width: 4px;
	outline-color: var(--color-foreground);
	--tw-ring-color: var(--color-foreground) !important;
}
/* duplicate for compat reasons */
*:focus-visible {
	outline-style: solid;
	outline-width: 4px;
	outline-color: var(--color-foreground);
	--tw-ring-color: var(--color-foreground); !important
}
*:focus:not(:focus-visible) {
	outline: 2px solid transparent;
	outline-offset: 2px;
}

/* components */
.emote {
	display: inline-block;
	width: var(--emote-size);
	height: var(--emote-size);
	margin: 0;
	object-fit: contain;
	vertical-align: middle;
	--image-border: none;
}
/* what if we make <q style=color:red>text</q> generate like <span style=color:red><span>"text"</span></span> */
.mention {
	font-weight: bold;
	text-decoration: none;
}
.mention:hover {
	text-decoration: underline;
}
.embed {
	background: #DDDDD8;
	border: 2px solid #666;
	color: blue;
	display: grid;
	place-items: center;
	padding: 0.5rem;
}
.read-more {
	text-decoration: none;
	color: var(--color-foreground);
	font-weight: 700;
pp	font-size: .875rem;
	line-height: 1.25rem;
	margin-bottom: .75rem;
	background-color: var(--color-white);
	cursor: pointer;
	display: block;
	box-sizing: border-box;
	cursor: pointer;
	margin: 0 1rem 0.75rem;
}
.read-more:not([data-open]) {
	border-top: 2px dotted;	
}
.read-more:hover {
	text-decoration: underline;
}


/*
the default image sizes/spacing are WAYYY too big,
but we can't mess with it too much, otherwise it could break things.
so, we just target unstyled images, at the top level or directly inside
a paragraph
*/
:host > div > img:not([style]),
p > img:not([style]) {
	max-height: var(--embed-height);
	--media-margin: 1em;
	border: var(--image-border);
}

:host {
	contain: content;
}
:host > div {
	margin: var(--prose-margin, 1rem);
	margin-left: 0;
	margin-right: 0;
	
	border-width: var(--prose-margin, 1rem);
	border-style: none solid;
	border-color: transparent;
	
	overflow-wrap: break-word;
	max-width: 65ch;
	box-sizing: content-box;
	-webkit-text-size-adjust: 100%;
	color: var(--color-notBlack);
	-moz-tab-size: 4; tab-size: 4;
	font:
		1rem / var(--line-height, 1.75)
		'Atkinson Hyperlegible', 'ui-sans-serif', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'segoe ui', 'Roboto', 'helvetica neue', 'Arial', 'noto sans', 'sans-serif',
		'apple color emoji', 'segoe ui emoji', 'segoe ui symbol', 'noto color emoji';
	scrollbar-color: initial;
	background: white;
}

/* .prose */
.prose {
	color: #191919;
	max-width: 65ch;
}
.prose :where(.lead) {
	color: var(--tw-prose-lead);
	font-size: 1.25em;
	line-height: 1.6;
	margin-top: 1.2em;
	margin-bottom: 1.2em;
}
.prose a {
	text-decoration: underline;
	font-weight: 500;
}
.prose :where(strong) {
	color: var(--tw-prose-bold);
	font-weight: 600;
}
.prose :where(ol) {
	list-style-type: decimal;
	padding-left: 1.625em;
}
.prose :where(ol[type=A]) {
	list-style-type: upper-alpha;
}
.prose :where(ol[type=a]) {
	list-style-type: lower-alpha;
}
.prose :where(ol[type=As]) {
	list-style-type: upper-alpha;
}
.prose :where(ol[type=as]) {
	list-style-type: lower-alpha;
}
.prose :where(ol[type=I]) {
	list-style-type: upper-roman;
}
.prose :where(ol[type=i]) {
	list-style-type: lower-roman;
}
.prose :where(ol[type=Is]) {
	list-style-type: upper-roman;
}
.prose :where(ol[type=is]) {
	list-style-type: lower-roman;
}
.prose :where(ol[type="1"]) {
	list-style-type: decimal;
}
.prose :where(ul) {
	list-style-type: disc;
	padding-left: 1.625em;
}
.prose :where(ol > li)::marker {
	font-weight: 400;
	color: var(--tw-prose-counters);
}
.prose :where(ul > li)::marker {
	color: var(--tw-prose-bullets);
}
.prose :where(hr) {
	border-color: var(--tw-prose-hr);
	border-top-width: 1px;
	margin-top: 1em;
	margin-bottom: 1em;
}
.prose :where(blockquote) {
	font-weight: 500;
	font-style: italic;
	color: var(--tw-prose-quotes);
	border-left-width: .25rem;
	border-left-color: var(--tw-prose-quote-borders);
	quotes: "“" "”" "‘" "’";
	margin-top: 1.6em;
	margin-bottom: 1.6em;
	padding-left: 1em;
}
.prose :where(blockquote p:first-of-type)::before {
	content: open-quote;
}
.prose :where(blockquote p:last-of-type)::after {
	content: close-quote;
}
.prose :where(h1) {
	color: var(--tw-prose-headings);
	font-weight: 800;
	font-size: 2.25em;
	margin-top: 0;
	margin-bottom: .8888889em;
	line-height: 1.1111111;
}
.prose :where(h1 strong) {
	font-weight: 900;
}
.prose :where(h2) {
	color: var(--tw-prose-headings);
	font-weight: 700;
	font-size: 1.5em;
	margin-top: 2em;
	margin-bottom: 1em;
	line-height: 1.3333333;
}
.prose :where(h2 strong) {
	font-weight: 800;
}
.prose :where(h3) {
	color: var(--tw-prose-headings);
	font-weight: 600;
	font-size: 1.25em;
	margin-top: 1.6em;
	margin-bottom: .6em;
	line-height: 1.6;
}
.prose :where(h3 strong) {
	font-weight: 700;
}
.prose :where(h4) {
	color: var(--tw-prose-headings);
	font-weight: 600;
	margin-top: 1.5em;
	margin-bottom: .5em;
	line-height: 1.5;
}
.prose :where(h4 strong) {
	font-weight: 700;
}
.prose :where(figure > *) {
	margin-top: 0;
	margin-bottom: 0;
}
.prose :where(figcaption) {
	color: var(--tw-prose-captions);
	font-size: .875em;
	line-height: 1.4285714;
	margin-top: .8571429em;
}
.prose :where(code) {
	color: var(--tw-prose-code);
	font-weight: 600;
	font-size: .875em;
}
/* god these are ugly */
.prose :where(code)::before {
	content: "`";
	opacity: 0.5; /* ADDED */
}
.prose :where(code)::after {
	content: "`";
	opacity: 0.5; /* ADDED */
}
.prose :where(a code) {
	color: var(--tw-prose-links);
}
.prose :where(pre) {
	color: var(--tw-prose-pre-code);
	background-color: var(--tw-prose-pre-bg);
	overflow-x: auto;
	font-weight: 400;
	font-size: .875em;
	line-height: 1.7142857;
	margin-top: 1.7142857em;
	margin-bottom: 1.7142857em;
	border-radius: .375rem;
	padding: .8571429em 1.1428571em;
}
.prose :where(pre code) {
	background-color: transparent;
	border-width: 0;
	border-radius: 0;
	padding: 0;
	font-weight: inherit;
	color: inherit;
	font-size: inherit;
	font-family: inherit;
	line-height: inherit;
}
.prose :where(pre code)::before, .prose :where(pre code)::after {
	content: none;
}
.prose :where(table) {
	width: 100%;
	table-layout: auto;
	text-align: left;
	margin-top: 2em;
	margin-bottom: 2em;
	font-size: .875em;
	line-height: 1.7142857;
}
.prose :where(thead) {
	border-bottom-width: 1px;
	border-bottom-color: var(--tw-prose-th-borders);
}
.prose :where(thead th) {
	color: var(--tw-prose-headings);
	font-weight: 600;
	vertical-align: bottom;
	padding-right: .5714286em;
	padding-bottom: .5714286em;
	padding-left: .5714286em;
}
.prose :where(tbody tr) {
	border-bottom-width: 1px;
	border-bottom-color: var(--tw-prose-td-borders);
}
.prose :where(tbody tr:last-child) {
	border-bottom-width: 0;
}
.prose :where(tbody td) {
	vertical-align: baseline;
	padding: .5714286em;
}
.prose {
	--tw-prose-body: #374151;
	--tw-prose-headings: #111827;
	--tw-prose-lead: #4b5563;
	--tw-prose-links: #111827;
	--tw-prose-bold: #111827;
	--tw-prose-counters: #6b7280;
	--tw-prose-bullets: #d1d5db;
	--tw-prose-hr: #e5e7eb;
	--tw-prose-quotes: #111827;
	--tw-prose-quote-borders: #e5e7eb;
	--tw-prose-captions: #6b7280;
	--tw-prose-code: #111827;
	--tw-prose-pre-code: #e5e7eb;
	--tw-prose-pre-bg: #1f2937;
	--tw-prose-th-borders: #d1d5db;
	--tw-prose-td-borders: #e5e7eb;
	--tw-prose-invert-body: #d1d5db;
	--tw-prose-invert-headings: #fff;
	--tw-prose-invert-lead: #9ca3af;
	--tw-prose-invert-links: #fff;
	--tw-prose-invert-bold: #fff;
	--tw-prose-invert-counters: #9ca3af;
	--tw-prose-invert-bullets: #4b5563;
	--tw-prose-invert-hr: #374151;
	--tw-prose-invert-quotes: #f3f4f6;
	--tw-prose-invert-quote-borders: #374151;
	--tw-prose-invert-captions: #9ca3af;
	--tw-prose-invert-code: #fff;
	--tw-prose-invert-pre-code: #d1d5db;
	--tw-prose-invert-pre-bg: rgb(0 0 0 / 50%);
	--tw-prose-invert-th-borders: #4b5563;
	--tw-prose-invert-td-borders: #374151;
	font-size: 1rem;
	line-height: 1.75;
}
.prose :where(p) {
	margin-top: 1.25em;
	margin-bottom: 1.25em;
}
.prose :where(img, video, figure) {
	margin-top: var(--media-margin);
	margin-bottom: var(--media-margin);
}
.prose :where(h2 code) {
	font-size: .875em;
}
.prose :where(h3 code) {
	font-size: .9em;
}
.prose :where(li) {
	margin-top: .5em;
	margin-bottom: .5em;
}
.prose :where(ol > li, ul > li) {
	padding-left: .375em;
}
.prose > * > :where(ul > li > *:first-child, ol > li > *:first-child) {
	margin-top: 1.25em;
}
.prose > * > :where(ul > li > *:last-child, ol > li > *:last-child) {
	margin-bottom: 1.25em;
}
.prose :where(ul ul, ul ol, ol ul, ol ol, ul > li p) {
	margin-top: .75em;
	margin-bottom: .75em;
}
.prose :where(hr + *, h2 + *, h3 + *, h4 + *) {
	margin-top: 0;
}
.prose :where(thead th:first-child, tbody td:first-child) {
	padding-left: 0;
}
.prose :where(thead th:last-child, tbody td:last-child) {
	padding-right: 0;
}
.prose > * > :where(:first-child) {
	margin-top: 0;
}
.prose > * > :where(:last-child) {
	margin-bottom: 0;
}
